openapi: 3.0.3
info:
  title: Catalyst Server API
  version: '1.0'
  description: API Specification for the Decentraland Catalyst Server
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://peer.decentraland.zone'
    description: Catalyst Development instance
  - url: 'https://peer-testing.decentraland.org'
    description: Catalyst Staging instance
  - url: 'https://peer.decentraland.org'
    description: First production Catalyst node
paths:
  /content/deployments:
    get:
      operationId: getAllDeployments
      summary: List all deployments stored in the content server
      description: >-
        This endpoint will return a complete list of the existing deployments 
        in the Content Server. The result can be filterd using any of the
        optional  query parameters in order to get a more specific result.  
      parameters:
        - in: query
          name: from
          schema:
            type: integer
            example: 1606829553969
          description: >-
            Acts as a filter in the collection of deployments, this value is the
            minimum value of timestamp (of the field indicated by SortingField:
            localTimestamp is the default) that any deployment in the collection
            will have.
        - in: query
          name: to
          schema:
            type: integer
            example: 1606829553969
          description: >-
            Acts as a filter in the collection of deployments, this value is the
            maximum value of timestamp (of the field indicated by SortingField:
            localTimestamp is the default) that any deployment in the collection
            will have.
        - in: query
          name: entityType
          schema:
            type: string
            enum:
              - profile
              - scene
              - wearable
            example: profile
          description: >-
            The type of entities that will be shown in the collection, many
            values can be sent. If any string ends with an ‘s’ or has
            whitespaces, then it will be correctly parsed. If any of the entity
            types sent is invalid, then the request will return a 404 status
            code
        - in: query
          name: entityId
          schema:
            type: string
            example: >-
              QmNknKv8MuKbfZ73z4QdUEsNbTd1ZAN1fSuwTFGiNGeCt5,FhdJnKv8MuKbfZ73z4QdUEsNbTd1ZAN1fSuwTFGiNGeCm7
          description: >-
            Comma-separted list of deployment object hashes. You can specify
            just one or many. 
        - in: query
          name: onlyCurrentlyPointed
          schema:
            type: boolean
            example: true
          description: >-
            Enable this filter to remove from the view the deployments that have
            been deleted by a new one.
        - in: query
          name: deployedBy
          schema:
            type: string
            example: '0xdbd3b0f6a8a9eb2bb5d968d26e5565a4448'
          description: >-
            The ethAddress associated with the deployment. As an example, this
            filter could be used to obtain deployments from the same user.
        - in: query
          name: sortingField
          schema:
            type: string
            enum:
              - local_timestamp
              - entity_timestamp
            example: local_timestamp
          description: >-
            This value is used as the field to order all the deployments in the
            collection. If no parameter is sent, then the default field to order
            with will be local_timestamp.
        - in: query
          name: pointer
          schema:
            type: array
            example: '106,-33'
          description: >-
            The pointer corresponding to the entity. For example, if the entity
            type is an scene, then the pointer will be a coordenate. If the
            entity type is a profile, then the pointer will be an ethAddress.
        - in: query
          name: limit
          schema:
            type: integer
            example: 100
          description: >-
            The deployments are a paginated collection, this parameter
            corresponds to the limit for each page.
        - in: query
          name: lastId
          schema:
            type: string
            example: QmNknKv8MuKbfZ73z4QdUEsNbTd1ZAN1fSuwTFGiNGeCt5
          description: >-
            It is the last entity id that was visited, so it will be skipped
            when showing current page.
        - in: query
          name: fields
          schema:
            type: string
            enum:
              - content
              - pointers
              - metadata
              - auditInfo
            example: content
          description: Fields that will be shown from the deployment.
      responses:
        '200':
          description: List of deployments
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                summary: request with limit=2
                deployments:
                  - entityType: wearable
                    entityId: QmSvFjNVy5n2EcUpMzkTYxUoEVDK5NRqy9dNPZb195NpsY
                    entityTimestamp: 1617981316561
                    deployedBy: '0x1D9aa2025b67f0F21d1603ce521bda7869098f8a'
                    pointers:
                      - >-
                        urn:decentraland:mumbai:collections-v2:0xf54ace381e3531b1e4fbaebde1bbd064deb2710c:0
                    content:
                      - key: image.png
                        hash: QmcAXXX8z6pT92UVbE7dXv7qRE6PDwo2UznhCB1vjzq3nF
                      - key: thumbnail.png
                        hash: QmPup3Vq7Xp5frNQ2bxG9PkNk7LCQ8BpkKUujobtxo2GXy
                      - key: vacuum.gltf
                        hash: QmbaNfR89xf2rzGmszF3bMb7yMHNDrEztFauFqquwx9Qk8
                    metadata:
                      id: >-
                        urn:decentraland:mumbai:collections-v2:0xf54ace381e3531b1e4fbaebde1bbd064deb2710c:0
                      name: Vacuum
                      description: ''
                      collectionAddress: '0xf54ace381e3531b1e4fbaebde1bbd064deb2710c'
                      rarity: unique
                      i18n:
                        - code: en
                          text: Vacuum
                      data:
                        replaces: []
                        hides: []
                        tags: []
                        representations:
                          - bodyShapes:
                              - 'urn:decentraland:off-chain:base-avatars:BaseMale'
                            mainFile: vacuum.gltf
                            contents:
                              - key: vacuum.gltf
                                url: >-
                                  https://peer.decentraland.zone/content/contents/QmbaNfR89xf2rzGmszF3bMb7yMHNDrEztFauFqquwx9Qk8
                              - key: thumbnail.png
                                url: >-
                                  https://peer.decentraland.zone/content/contents/QmPup3Vq7Xp5frNQ2bxG9PkNk7LCQ8BpkKUujobtxo2GXy
                            overrideHides: []
                            overrideReplaces: []
                          - bodyShapes:
                              - >-
                                urn:decentraland:off-chain:base-avatars:BaseFemale
                            mainFile: vacuum.gltf
                            contents:
                              - key: vacuum.gltf
                                url: >-
                                  https://peer.decentraland.zone/content/contents/QmbaNfR89xf2rzGmszF3bMb7yMHNDrEztFauFqquwx9Qk8
                              - key: thumbnail.png
                                url: >-
                                  https://peer.decentraland.zone/content/contents/QmPup3Vq7Xp5frNQ2bxG9PkNk7LCQ8BpkKUujobtxo2GXy
                            overrideHides: []
                            overrideReplaces: []
                        category: earring
                      image: image.png
                      thumbnail: thumbnail.png
                      metrics:
                        triangles: 1406
                        materials: 5
                        textures: 0
                        meshes: 5
                        bodies: 5
                        entities: 1
                      createdAt: 1617981316555
                      updatedAt: 1617981316555
                    local_timestamp: 1618412500309
                  - entityType: wearable
                    entityId: QmZbAEFPF7LSq9xVZTCAZoHPNV1QX7YiSbKL2g694EA1r7
                    entityTimestamp: 1617990950797
                    deployedBy: '0x1D9aa2025b67f0F21d1603ce521bda7869098f8a'
                    pointers:
                      - >-
                        urn:decentraland:mumbai:collections-v2:0x49cb9fcf3f6b8e1255ba6619ce61ed27f4fd75e3:0
                    content:
                      - key: image.png
                        hash: QmTXkqHja4niq59BNhRDmhVhExo8RmNmxAHihbtso1bSvX
                      - key: Scoreboard.gltf
                        hash: QmbXdxDwpvQqEPpVCgiTW2nuD6PKqYLcTRtTigBwVCsPVg
                      - key: thumbnail.png
                        hash: QmfWaE63Hu59ZtVdfM1UVvcSLpS9NgTBD6cQLojATpGkcx
                    metadata:
                      id: >-
                        urn:decentraland:MUMBAI:collections-v2:0x49cb9fcf3f6b8e1255ba6619ce61ed27f4fd75e3:0
                      name: Scoreboard gltf
                      description: ''
                      collectionAddress: '0x49cb9fcf3f6b8e1255ba6619ce61ed27f4fd75e3'
                      rarity: unique
                      i18n:
                        - code: en
                          text: Scoreboard gltf
                      data:
                        replaces: []
                        hides: []
                        tags: []
                        representations:
                          - bodyShapes:
                              - 'urn:decentraland:off-chain:base-avatars:BaseMale'
                            mainFile: vacuum.gltf
                            contents:
                              - key: vacuum.gltf
                                url: >-
                                  https://peer.decentraland.zone/content/contents/QmbaNfR89xf2rzGmszF3bMb7yMHNDrEztFauFqquwx9Qk8
                              - key: thumbnail.png
                                url: >-
                                  https://peer.decentraland.zone/content/contents/QmPup3Vq7Xp5frNQ2bxG9PkNk7LCQ8BpkKUujobtxo2GXy
                            overrideHides: []
                            overrideReplaces: []
                          - bodyShapes:
                              - >-
                                urn:decentraland:off-chain:base-avatars:BaseFemale
                            mainFile: vacuum.gltf
                            contents:
                              - key: vacuum.gltf
                                url: >-
                                  https://peer.decentraland.zone/content/contents/QmbaNfR89xf2rzGmszF3bMb7yMHNDrEztFauFqquwx9Qk8
                              - key: thumbnail.png
                                url: >-
                                  https://peer.decentraland.zone/content/contents/QmPup3Vq7Xp5frNQ2bxG9PkNk7LCQ8BpkKUujobtxo2GXy
                            overrideHides: []
                            overrideReplaces: []
                        category: earring
                      image: image.png
                      thumbnail: thumbnail.png
                      metrics:
                        triangles: 314
                        materials: 17
                        textures: 1
                        meshes: 15
                        bodies: 17
                        entities: 1
                      createdAt: 1617990950757
                      updatedAt: 1617990950757
                    local_timestamp: 1618412499760
                filters:
                  to: 1618412485287
                pagination:
                  offset: 0
                  limit: 2
                  moreData: true
                  lastId: qmr15dprqcq17nzywfq88sqly2qqh6b9lpv1g1xnpcsdya
                  next: >-
                    ?to=1618412499760&sortingField=local_timestamp&sortingOrder=DESC&lastId=QmZbAEFPF7LSq9xVZTCAZoHPNV1QX7YiSbKL2g694EA1r7&limit=2
        '400':
          description: Bad request
          content:
            application/json; charset=utf-8:
              examples:
                entityType:
                  summary: EntityType not recognized
                  value: Found an unrecognized entity type
                offset:
                  summary: Wrong offset value
                  value: >-
                    Offset can't be higher than 5000. Please use the 'next'
                    property for pagination.
                sortingField:
                  summary: Sorting field not found
                  value: Found an unrecognized sort field param
                sortingOrder:
                  summary: Sorting order not recognized
                  value: Found an unrecognized sort order param
                timeRange:
                  summary: Bad filtering
  '/content/audit/{entityType}/{entityId}':
    get:
      operationId: getEntityInformation
      summary: Get information about an entity
      parameters:
        - in: path
          name: entityType
          required: true
          schema:
            type: string
            enum:
              - profile
              - scene
              - wearable
            example: profile
          description: specify the type of entity to audit
        - in: path
          name: entityId
          required: true
          schema:
            type: string
            example: QmQgezF4UWTZpD5VqKs2AGCzucRJdm8zU87MxdSRH9heZR
          description: id of the entity
      description: >-
        Get information about an entity, such us Scenes Profiles or Werables, 
        with the specified entityId.      
      security: []
      responses:
        '200':
          description: 'Entity version, authchain and if the deployment was overwrriten'
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                version: v3
                deployedTimestamp: 1628271052660
                authChain:
                  - type: SIGNER
                    payload: '0x6B9d61D2AF37F0661dc3c3492fF74a6b13d13B86'
                    signature: ''
                  - type: ECDSA_EPHEMERAL
                    payload: >-
                      Decentraland Login

                      Ephemeral address:
                      0x422AF1a8705Caa58E16F21E7ECA64C8B868118Ca

                      Expiration: 2021-08-13T11:30:32.697Z
                    signature: >-
                      0x35a35fa65783f963bab9faa73035eedef019b783394d414df583ab0b89d859444168e985b0d71ff6c7fca57e77c0b609bb48c83ca997687d6072abe70f7e99ed1b
                  - type: ECDSA_SIGNED_ENTITY
                    payload: QmQgezF4UWTZpD5VqKs2AGCzucRJdm8zU87MxdSRH9heZR
                    signature: >-
                      0x085e17af656af3f60ee2cc98de99e458949b58cd5c5aa417f2cdb1f17cd1dde0370a719dc8385345969a9ee0c642d19b3650bc1076be593c59eb97f38ee0b2be1c
        '400':
          description: Unrecognized Entity type
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                error: 'Unrecognized type: Houses'
        '404':
          description: Not Found
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: Not Found
  /content/challenge:
    get:
      operationId: getIfPartOfTheDAO
      summary: Validate if the Server is part of the DAO
      description: >-
        Used by the Server to figure out their identity on the DAO by
        themselves, so they will generate a random challenge text, and then
        query each server for it. If the text matches, then they have found
        themselves.
      responses:
        '200':
          description: Challenge text
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                challengeText: 186a1c51-2c4c-4dae-913c-b87670600c56
  '/content/contents/{hashId}':
    get:
      operationId: getContentFile
      summary: Download content file
      description: Download the binary file associated with the specified hashId
      parameters:
        - in: path
          name: hashId
          required: true
          schema:
            type: string
            example: QmVzr55TyXcrbQUWBN6rf7K7zkZsTFnBK19LvgYM9CxFbu
          description: >-
            Hash of the file to be retrieved, you can search for the hashId in
            the content section of a deployment. If the entity version greater
            than or equal to v4,  then the hashing algorithm will be IPFS, if
            the entity version is v3 or below then  it will be SHA-256
      responses:
        '200':
          description: Binary file with the specified hashId
          headers:
            ETag:
              schema:
                type: string
                example: QmVzr55TyXcrbQUWBN6rf7K7zkZsTFnBK19LvgYM9CxFbu
              description: Double-quoted string with the hashId
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: ETag
              description: Which headers can be exposed as part of the response
            Cache-Control:
              schema:
                type: string
                example: 'public,max-age=31536000,immutable'
              description: Rules for caching in the request/response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                example: binary
        '404':
          description: File with the specified hashId Not Found
          content:
            application/json; charset=utf-8:
              schema:
                type: string
                example: Not Found
  '/content/contents/{hashId}/active-entities':
    get:
      operationId: getListEntityIdsByHashId
      summary: List of entityIds asociated with a hashId
      description: >-
        Get the list of entity ids of the deployments associated with the
        specified content hash. This endpoint is currently intended for
        troubleshooting as there is no specific use case for it.
      parameters:
        - in: path
          name: hashId
          required: true
          schema:
            type: string
            example: QmWFLwHGfvhB9a1epaRpS38HEwbHvhpaYzHEsNhDRgon7P
          description: Hash of the content file
      responses:
        '200':
          description: List of all the entitties asociated with the hashId
          content:
            application/json; charset=utf-8:
              schema:
                type: array
              example:
                - QmY4GFuf2jR3ocfuXuFLgvUrGEpjo84Byg44Pv2wduuinW
                - QmZbAEFPF7LSq9xVZTCAZoHPNV1QX7YiSbKL2g881MJLj8
        '404':
          description: Entities not found for the specified hash
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                error: The entity was not found
  /content/available-content:
    get:
      operationId: getIfFileExists
      summary: Validates if file exists on the Server
      description: >-
        Given a list of hashes, validates if the corresponding files exist in
        the storage of the server
      parameters:
        - in: query
          name: cid
          required: true
          schema:
            type: array
            example: QmWFLwHGfvhB9a1epaRpS38HEwbHvhpaYzHEsNhDRgon7P
          description: Hash of the content file
      responses:
        '200':
          description: >-
            List of objects with the hasIds and a boolean value specifying
            'true' if the files exists on the server and 'false' if it doesn't.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                - cid: QmWFLwHGfvhB9a1epaRpS38HEwbHvhpaYzHEsNhDRgon7P
                  available: true
                - cid: MfWFLwHGfvhB9a1epaRpJ38HEwbHvhpaYzHEsNhDRgon8H
                  available: false
        '400':
          description: Missing query parameters in the request
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: Please set at least one cid.
  /content/denylist:
    get:
      operationId: getDenyLists
      summary: List all deny listed items
      description: >-
        The content servers have the option to denylist certain type of objects
        like Entities, Content, Pointers, Addresses. This can only be done by
        catalysts owners. This endpoint returns the list of all denylist items
        in the format: `{entityType}-{id}`
      responses:
        '200':
          description: List of all the denylisted entities
          content:
            application/json; charset=utf-8:
              schema:
                type: array
              example:
                - content-QmY4GFuf2jR3ocfuXuFLgvUrGEpjo84Byg44Pv2wduuinW
                - address-0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7
                - 'scene-100,10'
  '/content/denylist/{type}/{id}':
    parameters:
      - in: path
        name: type
        required: true
        schema:
          type: string
          enum:
            - entity
            - pointer
            - content
            - address
          example: content
        description: Specify the type of Entity to block
      - in: path
        name: id
        required: true
        schema:
          type: string
          example: QmbcVjrVGDWwdCMdXQjpyzui2bCX4zaR8XwvkwFuBZvto3
        description: Specify the id of the entity to block
    put:
      operationId: putNewDenyList
      summary: Insert item in denylist
      description: >-
        Inserts an entry in the deny list for the specified object type with the
        given id. This action will succeed only if the item is not already
        deny-listed and if the blocker has the correct permission to do it.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                blocker:
                  type: string
                timestamp:
                  type: integer
                signature:
                  type: string
            example:
              blocker: '0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7,'
              timestamp: '1628534551726,'
              signature: >-
                block-content-QmbcVjrVGDWwdCMdXQjpyzui2bCX4zaR8XwvkwFuBZvto3-1628534551726
      responses:
        '201':
          description: Denylist created successfuly
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: Denylist created successfuly
        '400':
          description: Bad request
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: >-
                Failed to authenticate the blocker. Error was: The signature is
                too old or too far in the future
        '500':
          description: There was a server error while trying to create the denylist
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: 500 Internal Server Error
    delete:
      operationId: deleteDenyList
      summary: Remove object from the denylist
      description: >-
        Remove object from the denylist. This action will succeed only if the
        item is deny-listed and if the blocker has the correct permission to do
        it.
      parameters:
        - in: query
          name: blocker
          required: true
          schema:
            type: string
            example: '0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7'
          description: Blocker's Ethereum address
        - in: query
          name: timestamp
          required: true
          schema:
            type: string
            example: 1628534551726
          description: Request timestamp
        - in: query
          name: signature
          required: true
          schema:
            type: string
            example: >-
              unblock-content-QmbcVjrVGDWwdCMdXQjpyzui2bCX4zaR8XwvkwFuBZvto3-1628534551726
          description: 'Must be of the form unblock-${type}-${id}-${timestamp}'
      responses:
        '200':
          description: Object removed from denylist successfuly
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: Object removed from denylist successfuly
        '400':
          description: Bad request
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: >-
                Failed to authenticate the blocker. Error was: The signature is
                too old or too far in the future
        '404':
          description: Not Found
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: >-
                Cannot DELETE
                /content/denylist/content/QmbcVjrVGDWwdCMdXQjpyzui2bCX4zaR8XwvkwFuBZvto3
        '500':
          description: There was a server error while trying to create the denylist
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              example: 500 Internal Server Error
    head:
      operationId: headDenyList
      summary: Check if a specific object is on the denylist
      description: Check if a specific object is on the denylist
      responses:
        '200':
          description: The object is on the denylist
        '404':
          description: The object is not on the denylist
  /content/entities:
    post:
      operationId: postEntity
      summary: Deploys an entity
      description: >-
        Deploys an entity in the content server. This request must contain a
        file with the entity itself and also the files associated with it, such
        as 3D models, as well as information about the entity and requester.
        This request will succeed only if the hash of the entity file matches
        the entityId and also if the signature is valid has the correct
        permission to modify the pointers associated with it.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                entityId:
                  type: array
                  example: QmY4GFuf2jR3ocfuXuFLgvUrGEpjo84Byg44Pv2wduuinW
                authChain:
                  type: string
                  example:
                    - type: SIGNER
                      payload: '0x716954738e57686a08902d9dd586e813490fee23'
                    - type: ECDSA_EPHEMERAL
                      payload: >-
                        Decentraland Login

                        Ephemeral address:
                        0x90a43461d3e970785B945FFe8f7628F2BC962D6a

                        Expiration: 2021-07-10T20:55:42.215Z
                      signature: >-
                        0xe64e46fdd7d8789c0debec54422ae77e31b77e5a28287e072998e1114e252c57328c17756400d321e9e77032347c9d05e63fb59a3b6c3ab754565f9db86b8c481b
                    - type: ECDSA_SIGNED_ENTITY
                      payload: QmNMZBy7khBxdigikA8mcJMyv6yeBXfMv3iAcUiBr6n72C
                      signature: >-
                        0xbed22719dcdc19580353108027c41c65863404879592c65014d806efa961c629777adc76986193eaee4e48f278ec59feb1c289827254230af85b2955157ec8061b
                ethAddress:
                  type: string
                  example: '0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7'
                signature:
                  type: string
      responses:
        '200':
          description: >-
            Entity created successfuly. The response will cointain the timestamp
            and result.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                creationTimestamp: success
        '400':
          description: >-
            Bad request. Returns the error object with the list of errors from
            the server response.      
        '500':
          description: >-
            Internal Server Error. Returns the error object with the list of
            errors from the server response.
  '/content/entities/{type}':
    get:
      operationId: getListOfEntities
      summary: List of entities of the specified Type
      description: >-
        Returns the list of entities of the specified type with the specified id
        or pointers. Only one of these filters must be specified as a query
        parameter.
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: array
            enum:
              - profile
              - scene
              - wearable
            example: profile
          description: Entity Type that will be returned by the request
        - in: query
          name: pointer
          allowEmptyValue: true
          schema:
            type: string
            example: null
          description: >-
            Entities must be filtered by pointer XOR entityId. Use this
            parameter if you want to retrieve an entity of the specified type
            with this pointer.
        - in: query
          name: id
          allowEmptyValue: true
          schema:
            type: array
            example: QmeA8RpAtqU6gCebNaWRXtM9nQs3ugzzbeQm3L7uKrP4Jp
          description: >-
            Entities must be filtered by pointer XOR entityId. Use this
            parameter if you want to retrieve an entity of the specified type
            with this entityId.
        - in: query
          name: fields
          schema:
            type: string
            example: 'entityVersion,entityType,entityId,pointers'
          description: >-
            List of comma separeted fields to be retrieved in the request
            response.
      responses:
        '200':
          description: >-
            Entity created successfuly. The response will cointain the timestamp
            and result.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                - version: v3
                  id: QmeA8RpAtqU6gCebNaWRXtM9nQs3ugzzbeQm3L7uKrP4Jp
                  type: scene
                  timestamp: 1628607669304
                  pointers:
                    - '11,66'
        '400':
          description: >-
            Bad request: ids or pointers must be present in the request, but not
            both
  /content/failed-deployments:
    get:
      operationId: getFailedDeployments
      summary: List of failed deployments
      description: Retrieves a list of the failed deployments
      responses:
        '200':
          description: Failed deployments list
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                - failedDeploymentsRepo: 'https://peer.dclnodes.io/content'
                  entityType: profile
                  entityId: Qmej2ASCw4ubcjd2KHyMkcQz8HbMUfLqGbtheWoxykBt38
                  reason: No entity or audit
                  errorDescription: 'During sync, we couldn''t fetch the entity or the audit info'
  /content/pointer-changes:
    get:
      operationId: getListPointerChanges
      summary: List of changes made to a pointer
      description: >-
        List of all deltas from the deployments inside the filters that affect
        the given pointers. It returns a list of changes with the `before` field
        (the entity that was overridden with this deployment) and `after` (the
        entity that overrides the current one if present).
      parameters:
        - in: query
          name: from
          allowEmptyValue: true
          schema:
            type: integer
            example: 1606829553969
          description: >-
            Acts as a filter in the collection of deployments, this value is the
            minimum value of local timestamp that any deployment in the
            collection will have.
        - in: query
          name: to
          allowEmptyValue: true
          schema:
            type: integer
            example: 1606829553969
          description: >-
            Acts as a filter in the collection of deployments, this value is the
            maximum value of local timestamp that any deployment in the
            collection will have.
        - in: query
          name: lastId
          allowEmptyValue: true
          schema:
            type: string
            example: QmNknKv8MuKbfZ73z4QdUEsNbTd1ZAN1fSuwTFGiNGeCt5
          description: >-
            It is the last entity id that was visited, so it will be skipped
            when showing current page.
        - in: query
          name: limit
          allowEmptyValue: true
          schema:
            type: integer
            example: 100
          description: >-
            The deployments are a paginated collection, this parameter
            corresponds to the limit for each page. The default value is 500.
        - in: query
          name: entityType
          allowEmptyValue: true
          schema:
            type: array
            enum:
              - scene
              - profile
              - wearable
            example: profile
          description: >-
            The type of entities that will be shown in the collection, many
            values can be sent.
      responses:
        '200':
          description: List of deployment changes made to pointers
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                deltas:
                  - entityType: scene
                    entityId: QmWBMqDmFebLr4pJWxBpXdtToqTNxqeefzkerQ1C35cGeb
                    localTimestamp: 1628614712569
                    changes:
                      - pointer: '-62,-100'
                        before: QmSdyt9Sdys7Ntk7kM5Z8a6ASckyC7KuD1pWVNCU6bMA8e
                        after: QmWBMqDmFebLr4pJWxBpXdtToqTNxqeefzkerQ1C35cGeb
                  - entityType: scene
                    entityId: QmT3EYh8cGtB8oHMEgCc5GuRMPofkHNwb936ZhRocwgrAL
                    localTimestamp: 1628612595680
                    changes:
                      - pointer: '59,-139'
                        before: QmUJGj7Mo8cYtZ6wQECdycHFpT8BxyoNXm6BUyHak3yB8j
                        after: QmT3EYh8cGtB8oHMEgCc5GuRMPofkHNwb936ZhRocwgrAL
                  - entityType: scene
                    entityId: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                    localTimestamp: 1628612397349
                    changes:
                      - pointer: '61,-112'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '61,-111'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '62,-112'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '62,-111'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '63,-112'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '63,-111'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '64,-111'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '65,-111'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '66,-112'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
                      - pointer: '66,-111'
                        before: QmYsuAkiJbF7DF5tVy4H68bqFKktP28T7bH7LTgGpYeexk
                        after: QmQSBke1rXUtPYHLJvJdrfX85n68YMSRgb4KeGhNL8w8KL
        '400':
          description: Bad Request
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples:
                entityType:
                  summary: EntityType not recognized
                  value: Found an unrecognized entity type
                offset:
                  summary: Wrong offset value
                  value: >-
                    Offset can't be higher than 5000. Please use the 'next'
                    property for pagination.
  '/content/snapshot/{type}':
    get:
      operationId: getActiveEntities
      summary: Snapshot with a list of active entities
      description: >-
        Lists all active deployments of the given entity type from the snapshots
        stored in the database. The snapshots are taken in batches of
        deployments with a configurable amount per entity type, they are not
        inforced in time.  If the information needed is front in time, you may
        use the `/content/pointer-changes` endpoint with the necessary `from`
        filter.
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - scene
              - profile
              - wearable
            example: scene
          description: The type of entities that want to retrieve a snapshot
      responses:
        '200':
          description: >-
            Hash with a reference to a JSON file containing an Array of Arrays
            with the list of all activete entities at the moment of the
            Snapshot. Once you get the hash you can download it using the
            /content/contents/{hashId} endpoint. The timestamp in the response
            is thte time of the last deployment included in the snapshot.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                hash: bafybeihz7qc6cqy3gwuo5azfik27qnb24vcpdiitisydsyni3f4xvvvduq
                lastIncludedDeploymentTimestamp: 1628607075425
        '400':
          description: 'Bad Request: Unrecognized'
        '503':
          description: Snapshot not yet created
  /content/status:
    get:
      operationId: getStatus
      summary: Server status
      description: Retrieve deteailed information about the server status
      responses:
        '200':
          description: Content Server status information
          content:
            application/json; charset=utf-8:
              schema:
                type: object
              example:
                name: ''
                version: v3
                currentTime: 1628618042062
                lastImmutableTime: 0
                historySize: 968083
                synchronizationStatus:
                  otherServers:
                    - address: 'https://peer.dclnodes.io/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617995540
                    - address: 'https://peer-wc1.decentraland.org/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617952275
                    - address: 'https://peer-ec1.decentraland.org/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617951020
                    - address: 'https://peer-eu1.decentraland.org/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617964042
                    - address: 'https://peer.kyllian.me/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617996216
                    - address: 'https://peer-ap1.decentraland.org/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617993064
                    - address: 'https://peer.uadevops.com/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617962087
                    - address: 'https://peer.melonwave.com/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617994238
                    - address: 'https://interconnected.online/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617976603
                    - address: 'https://peer.decentral.games/content'
                      connectionState: Connected
                      lastDeploymentTimestamp: 1628617977558
                  lastSyncWithDAO: 1628616434517
                  synchronizationState: Synced
                  lastSyncWithOtherServers: 1628617998093
                commitHash: 7890de4598f88a382863ea5f399b9cc17b80b42e
                catalystVersion: 1.3.3
                ethNetwork: mainnet
components: {}
